name: Multi-Platform Build

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  # ============================================================================
  # Linux Build (Ubuntu 24.04+)
  # ============================================================================
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build_type: [Release]
        log_level: [INFO]
        console_log: [OFF]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            libx11-dev \
            libxext-dev \
            libwayland-dev \
            libxkbcommon-dev \
            libegl1-mesa-dev \
            libibus-1.0-dev \
            libdbus-1-dev \
            libspdlog-dev \

      - name: Configure CMake
        run: |
          cmake -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DENABLE_CONSOLE_LOG=${{ matrix.console_log }} \
            -DLOG_LEVEL=${{ matrix.log_level }}

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} -j$(nproc)

      - name: Package with CPack
        if: matrix.build_type == 'Release'
        run: |
          cmake --install build --config ${{ matrix.build_type }} --prefix install
          cd build
          cpack -C ${{ matrix.build_type }} -G ZIP -B packages

      - name: Upload artifact (CPack)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: Match3-Linux-${{ matrix.build_type }}-log${{ matrix.log_level }}-console${{ matrix.console_log }}
          path: build/packages/*.zip
          retention-days: 7

  # ============================================================================
  # Windows Build (MSVC)
  # ============================================================================
  build-windows:
    runs-on: windows-latest

    strategy:
      matrix:
        build_type: [Release]
        log_level: [INFO]
        console_log: [OFF]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          key: ${{ runner.os }}-vcpkgcmd

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2

      - name: vcpkg build
        uses: johnwason/vcpkg-action@v7
        id: vcpkg
        with:
          pkgs: sdl3 sdl3-image
          triplet: x64-windows-static
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          VCPKG_CMAKE_CONFIGURE_OPTIONS: "-DMAYBE_UNUSED_VARIABLES=SDL_UNIX_CONSOLE_BUILD"

      - name: Configure CMake
        run: cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }} \
          -S . -B build \
          -DENABLE_CONSOLE_LOG=${{ matrix.console_log }} \
          -DLOG_LEVEL=${{ matrix.log_level }} \
          -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} -j

      - name: Package with CPack
        if: matrix.build_type == 'Release'
        run: |
          cmake --install build --config ${{ matrix.build_type }} --prefix install
          cd build
          cpack -C ${{ matrix.build_type }} -G ZIP -B packages

      - name: Upload artifact (CPack)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: Match3-Windows-${{ matrix.build_type }}-log${{ matrix.log_level }}-console${{ matrix.console_log }}
          path: build/packages/*.zip
          retention-days: 7

  # ============================================================================
  # Android Build (NDK)
  # ============================================================================
  build-android:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build_type: [Release]
        abi: [armeabi-v7a, arm64-v8a, x86, x86_64]
        log_level: [INFO]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26c
          add-to-path: true

      - name: Configure CMake for Android
        run: |
          cmake -B build-android-${{ matrix.abi }} \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ matrix.abi }} \
            -DANDROID_PLATFORM=android-24 \
            -DANDROID_STL=c++_shared \
            -DENABLE_CONSOLE_LOG=OFF \
            -DLOG_LEVEL=${{ matrix.log_level }}

      - name: Build
        run: cmake --build build-android-${{ matrix.abi }} --config ${{ matrix.build_type }} -j$(nproc)

      - name: Check build artifacts
        run: |
          echo "=== Build directory structure ==="
          find build-android-${{ matrix.abi }} -type f -name "*.so" -o -name "libMatch3*" | head -20
          echo ""
          echo "=== Checking src build directory ==="
          ls -la build-android-${{ matrix.abi }}/src/ | grep -E "(\.so|Match3)" || echo "No Match3 files found"

      - name: Package
        run: |
          cd build-android-${{ matrix.abi }}
          mkdir -p package/match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}

          # Find the built shared library (typically in src directory)
          if [ -f "src/libMatch3.so" ]; then
            echo "Found library at src/libMatch3.so"
            cp src/libMatch3.so package/match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}/
          elif find . -name "*.so" | grep -i match; then
            find . -name "libMatch3.so" -exec cp {} package/match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}/ \;
            find . -name "libmatch-3.so" -exec cp {} package/match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}/ \;
          else
            echo "WARNING: No .so file found!"
            echo "Contents of build directory:"
            find . -type f -name "*.so" | head -10
          fi

          # Verify package contents
          echo "Package contents after copy:"
          ls -la package/match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}/

          # Create tarball
          cd package
          tar czf match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}.tar.gz match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}
          echo "Archive created:"
          ls -lh match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}-log${{ matrix.log_level }}
          path: build-android-${{ matrix.abi }}/package/match-3-android-${{ matrix.abi }}-${{ matrix.build_type }}.tar.gz
          retention-days: 7

  # ============================================================================
  # Create Release (on tags)
  # ============================================================================
  create-release:
    needs: [build-linux, build-windows, build-android]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
